import hydra
import torch
import easyocr
import cv2
import pandas as pd
from ultralytics.yolo.engine.predictor import BasePredictor
from ultralytics.yolo.utils import DEFAULT_CONFIG, ROOT, ops
from ultralytics.yolo.utils.checks import check_imgsz
from ultralytics.yolo.utils.plotting import Annotator, colors, save_one_box
from collections import deque
import time
import cv2

# Load the dataset
df = pd.read_csv('/content/Licence-Plate-Detection-and-Recognition-using-YOLO-V8-EasyOCR/FASTag_dataset_singval.csv')  # Ensure this path is correct
print("Dataset loaded. Number of records:", len(df))  # Check if dataset is loaded

def get_vehicle_details(plate_number):
    match = df[df['Vehicle_Plate_Number'] == plate_number]
    if not match.empty:
        return match.iloc[0]['Vehicle_Type'], match.iloc[0]['FastagID'], match.iloc[0]['Vehicle_Plate_Number']
    return None, None, None

def clean_plate_number(ocr_result):
    cleaned_result = ocr_result.replace(" ", "").replace("-", "")
    return cleaned_result

def getOCR(im, coors):
    x, y, w, h = int(coors[0]), int(coors[1]), int(coors[2]), int(coors[3])
    im = im[y:h, x:w]
    conf = 0.2

    gray = cv2.cvtColor(im, cv2.COLOR_RGB2GRAY)
    results = reader.readtext(gray)
    ocr = ""

    for result in results:
        if len(results) == 1:
            ocr = result[1]
        elif len(results) > 1 and len(result[1]) > 6:  # Check only valid results
            ocr = result[1]
            break  # Exit after the first valid result

    print(f"OCR Result: {ocr}")  # Debugging line
    return str(ocr)

class DetectionPredictor(BasePredictor):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.ocr_buffer = deque(maxlen=5)  # Buffer to store recent OCR results
        self.last_display_time = 0  # Track last time a match was displayed
        self.display_duration = 2  # Duration to display matching results in seconds

    def get_annotator(self, img):
        return Annotator(img, line_width=self.args.line_thickness, example=str(self.model.names))

    def preprocess(self, img):
        img = torch.from_numpy(img).to(self.model.device)
        img = img.half() if self.model.fp16 else img.float()  # uint8 to fp16/32
        img /= 255  # 0 - 255 to 0.0 - 1.0
        return img

    def postprocess(self, preds, img, orig_img):
        preds = ops.non_max_suppression(preds,
                                        self.args.conf,
                                        self.args.iou,
                                        agnostic=self.args.agnostic_nms,
                                        max_det=self.args.max_det)

        for i, pred in enumerate(preds):
            shape = orig_img[i].shape if self.webcam else orig_img.shape
            pred[:, :4] = ops.scale_boxes(img.shape[2:], pred[:, :4], shape).round()

        return preds

    def write_results(self, idx, preds, batch):
        p, im, im0 = batch
        log_string = ""
        if len(im.shape) == 3:
            im = im[None]  # expand for batch dim
        self.seen += 1
        im0 = im0.copy()
        if self.webcam:  # batch_size >= 1
            log_string += f'{idx}: '
            frame = self.dataset.count
        else:
            frame = getattr(self.dataset, 'frame', 0)

        self.data_path = p
        self.txt_path = str(self.save_dir / 'labels' / p.stem) + ('' if self.dataset.mode == 'image' else f'_{frame}')
        log_string += '%gx%g ' % im.shape[2:]  # print string
        self.annotator = self.get_annotator(im0)

        det = preds[idx]
        self.all_outputs.append(det)
        if len(det) == 0:
            print("No detections found.")  # Debugging line
            return log_string

        for c in det[:, 5].unique():
            n = (det[:, 5] == c).sum()  # detections per class
            log_string += f"{n} {self.model.names[int(c)]}{'s' * (n > 1)}, "

        gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh

        for *xyxy, conf, cls in reversed(det):
            if self.args.save_txt:  # Write to file
                xywh = (ops.xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                line = (cls, *xywh, conf) if self.args.save_conf else (cls, *xywh)  # label format
                with open(f'{self.txt_path}.txt', 'a') as f:
                    f.write(('%g ' * len(line)).rstrip() % line + '\n')

            if self.args.save or self.args.save_crop or self.args.show:  # Add bbox to image
                c = int(cls)  # integer class
                ocr = getOCR(im0, xyxy)
                cleaned_ocr = clean_plate_number(ocr.strip())

                # Check for valid OCR result
                if cleaned_ocr:
                    self.ocr_buffer.append(cleaned_ocr)  # Add OCR result to buffer
                    vehicle_type, fastag_id, plate_number = get_vehicle_details(cleaned_ocr)

                    # If a match is found in the dataset
                    if vehicle_type and fastag_id:
                        label = f'Plate Number: {plate_number}, FASTag ID: {fastag_id}, Vehicle Type: {vehicle_type}'
                        box_color = (255, 0, 0)  # Green color for matched
                    else:
                        label = "Scanning in progress..."
                        box_color = (0, 0, 255)  # Red for scanning

                    # Draw the bounding box with the chosen color
                    self.annotator.box_label(xyxy, "", color=box_color)  # Remove default text

                    # To reduce font size, adjust the font_scale and thickness here:
                    font_scale = 0.6  # Adjust for smaller text
                    thickness = 1

                    # Get text size for alignment
                    (w, h), baseline = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, font_scale, thickness)

                    # Calculate the position to center the text inside the box
                    text_position = (int(xyxy[0]), int(xyxy[1]) - 5)  # Position text inside the box

                    # Draw filled rectangle (background) for the label
                    cv2.rectangle(im0, (int(xyxy[0]), int(xyxy[1]) - h - 5), (int(xyxy[0]) + w, int(xyxy[1])), box_color, -1)

                    # Overlay the label text inside the filled rectangle
                    cv2.putText(im0, label, text_position, cv2.FONT_HERSHEY_SIMPLEX, font_scale, (255, 255, 255), thickness, lineType=cv2.LINE_AA)

        return log_string


@hydra.main(version_base=None, config_path=str(DEFAULT_CONFIG.parent), config_name=DEFAULT_CONFIG.name)
def predict(cfg):
    cfg.model = cfg.model or "yolov8n.pt"
    cfg.imgsz = check_imgsz(cfg.imgsz, min_dim=2)  # check image size
    cfg.source = cfg.source if cfg.source is not None else ROOT / "assets"
    predictor = DetectionPredictor(cfg)
    predictor()


if __name__ == "__main__":
    reader = easyocr.Reader(['en'])
    predict()
